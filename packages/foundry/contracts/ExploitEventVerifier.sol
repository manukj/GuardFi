// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IVerifier {
    function verifyEVMTransaction(
        bytes32 transactionHash,
        uint16 requiredConfirmations
    ) external view returns (bool);
}

contract ExploitEventVerifier {
    event ExploitReported(
        address indexed reporter,
        bytes32 transactionHash,
        uint256 timestamp
    );
    event ExploitVerified(
        address indexed reporter,
        bytes32 transactionHash,
        bool verified
    );

    IVerifier public verifier;

    constructor(address _verifier) {
        // Initialize Ownable in the constructor
        verifier = IVerifier(_verifier);
    }

    function reportExploit(
        bytes32 transactionHash,
        uint16 confirmations
    ) external {
        emit ExploitReported(msg.sender, transactionHash, block.timestamp);

        // Call the verifier to "verify" the transaction with mocked response
        bool isVerified = verifier.verifyEVMTransaction(
            transactionHash,
            confirmations
        );

        emit ExploitVerified(msg.sender, transactionHash, isVerified);
    }

    // Update the verifier address if needed
    function setVerifier(address _verifier) external {
        verifier = IVerifier(_verifier);
    }
}
